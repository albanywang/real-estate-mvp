# ===============================
# SUPABASE USER DATABASE SETUP
# ===============================

# 1. Install Required Dependencies
npm install pg bcryptjs jsonwebtoken cors helmet dotenv express

# 2. Install Dev Dependencies (optional)
npm install --save-dev nodemon

# 3. Update your .env file
cat >> .env << EOF

# Supabase Configuration
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_KEY=your-service-key

# Update JWT Secret (make it longer and more secure)
JWT_SECRET=your-super-secure-jwt-secret-key-minimum-32-characters-long-abcdefghijklmnop

# Client URL for CORS
CLIENT_URL=http://localhost:3000
EOF

# 4. Create your main server file
cat > server/app.js << 'EOF'
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
require('dotenv').config();

// Import routes and middleware
const userRoutes = require('./routes/users');
const { corsMiddleware, securityHeaders, requestLogger, errorHandler } = require('./middleware/auth');
const { testConnection } = require('./config/database');

const app = express();

// Security middleware
app.use(helmet());
app.use(corsMiddleware);
app.use(securityHeaders);

// Logging middleware
app.use(requestLogger);

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Routes
app.use('/api/users', userRoutes);

// Health check endpoint
app.get('/health', async (req, res) => {
  try {
    const dbConnected = await testConnection();
    res.json({
      status: 'OK',
      timestamp: new Date().toISOString(),
      database: dbConnected ? 'connected' : 'disconnected',
      environment: process.env.NODE_ENV || 'development'
    });
  } catch (error) {
    res.status(500).json({
      status: 'ERROR',
      message: error.message
    });
  }
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Endpoint not found'
  });
});

// Error handling middleware (must be last)
app.use(errorHandler);

const PORT = process.env.PORT || 3001;

app.listen(PORT, async () => {
  console.log(`🚀 Server running on port ${PORT}`);
  console.log(`📊 Environment: ${process.env.NODE_ENV || 'development'}`);
  
  // Test database connection on startup
  const dbConnected = await testConnection();
  if (dbConnected) {
    console.log('📈 Ready to accept connections');
  } else {
    console.error('❌ Database connection failed - check your configuration');
  }
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('👋 SIGTERM received, shutting down gracefully');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('👋 SIGINT received, shutting down gracefully');
  process.exit(0);
});
EOF

# 5. Update your package.json scripts
cat > package.json << 'EOF'
{
  "name": "real-estate-server",
  "version": "1.0.0",
  "description": "Real Estate Application Server with User Management",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js",
    "init-db": "node scripts/initDb.js",
    "cleanup": "node scripts/cleanup.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "express": "^4.18.2",
    "pg": "^8.11.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.0",
    "cors": "^2.8.5",
    "helmet": "^6.1.5",
    "dotenv": "^16.0.3"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  },
  "keywords": ["real-estate", "nodejs", "postgresql", "supabase"],
  "author": "Your Name",
  "license": "MIT"
}
EOF

# 6. Create database initialization script
mkdir -p server/scripts
cat > server/scripts/initDb.js << 'EOF'
const { testConnection } = require('../config/database');
const userDbService = require('../services/userDbService');

async function initializeDatabase() {
  try {
    console.log('🔧 Initializing database...');
    
    // Test connection first
    const isConnected = await testConnection();
    if (!isConnected) {
      throw new Error('Database connection failed');
    }
    
    // Initialize user tables
    await userDbService.initializeTables();
    
    console.log('🎉 Database initialization completed successfully!');
    console.log('');
    console.log('✅ Tables created:');
    console.log('  - users');
    console.log('  - user_sessions');
    console.log('  - user_favorites');
    console.log('  - user_search_history');
    console.log('');
    console.log('🚀 Your user database is ready!');
    
  } catch (error) {
    console.error('❌ Database initialization failed:', error);
    process.exit(1);
  }
  
  process.exit(0);
}

initializeDatabase();
EOF

# 7. Create cleanup script
cat > server/scripts/cleanup.js << 'EOF'
const userDbService = require('../services/userDbService');

async function runCleanup() {
  try {
    console.log('🧹 Starting database cleanup...');
    
    await userDbService.cleanup();
    
    console.log('✅ Database cleanup completed!');
    
  } catch (error) {
    console.error('❌ Database cleanup failed:', error);
    process.exit(1);
  }
  
  process.exit(0);
}

runCleanup();
EOF

# 8. Make scripts executable
chmod +x server/scripts/initDb.js
chmod +x server/scripts/cleanup.js

# 9. Create your folder structure
mkdir -p server/{config,models,routes,services,middleware,scripts}

echo "✅ Supabase setup files created!"
echo ""
echo "📋 Next steps:"
echo "1. Update your .env file with your Supabase credentials"
echo "2. Run: npm install"
echo "3. Run: npm run init-db"
echo "4. Run: npm run dev"
echo ""
echo "🔗 Your API will be available at: http://localhost:3001"

# ===============================
# SUPABASE DASHBOARD SETUP
# ===============================

# If you want to create tables directly in Supabase dashboard, 
# run these SQL commands in the SQL Editor:

cat << 'EOF'

-- Run this SQL in your Supabase SQL Editor:

-- Enable RLS (Row Level Security) if needed
-- ALTER TABLE users ENABLE ROW LEVEL SECURITY;

-- Users table
CREATE TABLE IF NOT EXISTS users (
  id SERIAL PRIMARY KEY,
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  full_name VARCHAR(255) NOT NULL,
  phone VARCHAR(20),
  date_of_birth DATE,
  gender VARCHAR(10) CHECK (gender IN ('male', 'female', 'other')),
  profile_image_url VARCHAR(500),
  
  -- Authentication
  email_verified BOOLEAN DEFAULT FALSE,
  email_verification_token VARCHAR(255),
  password_reset_token VARCHAR(255),
  password_reset_expires TIMESTAMP,
  
  -- User preferences
  preferred_language VARCHAR(5) DEFAULT 'ja' CHECK (preferred_language IN ('ja', 'en')),
  notification_preferences JSONB DEFAULT '{}',
  
  -- Account status
  account_status VARCHAR(20) DEFAULT 'active' CHECK (account_status IN ('active', 'suspended', 'deleted')),
  last_login TIMESTAMP,
  login_count INTEGER DEFAULT 0,
  
  -- Social logins
  google_id VARCHAR(255),
  line_id VARCHAR(255),
  yahoo_id VARCHAR(255),
  
  -- Metadata
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User sessions table
CREATE TABLE IF NOT EXISTS user_sessions (
  id VARCHAR(255) PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  expires_at TIMESTAMP NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  ip_address INET,
  user_agent TEXT
);

-- User favorites table
CREATE TABLE IF NOT EXISTS user_favorites (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  property_id INTEGER NOT NULL REFERENCES properties(id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  
  UNIQUE(user_id, property_id)
);

-- User search history table
CREATE TABLE IF NOT EXISTS user_search_history (
  id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  search_query TEXT,
  search_filters JSONB DEFAULT '{}',
  results_count INTEGER,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_account_status ON users(account_status);
CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_user_sessions_expires_at ON user_sessions(expires_at);
CREATE INDEX IF NOT EXISTS idx_user_favorites_user_id ON user_favorites(user_id);
CREATE INDEX IF NOT EXISTS idx_user_favorites_property_id ON user_favorites(property_id);
CREATE INDEX IF NOT EXISTS idx_user_search_history_user_id ON user_search_history(user_id);

-- Create trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS update_users_updated_at ON users;
CREATE TRIGGER update_users_updated_at
  BEFORE UPDATE ON users
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

EOF