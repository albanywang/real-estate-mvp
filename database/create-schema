Let's start by defining the database schema and then create sample data with a script to populate your database:
-- Enable PostGIS extension if not already enabled
CREATE EXTENSION IF NOT EXISTS postgis;

-- Users table
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    user_type VARCHAR(20) NOT NULL CHECK (user_type IN ('buyer', 'seller', 'agent', 'admin')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Property types lookup table
CREATE TABLE property_types (
    type_id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL
);

-- Neighborhoods/Areas table
CREATE TABLE neighborhoods (
    neighborhood_id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    city VARCHAR(100) NOT NULL,
    state VARCHAR(50) NOT NULL,
    zip_code VARCHAR(20) NOT NULL,
    -- PostGIS geometry for neighborhood boundaries (optional)
    boundary GEOMETRY(POLYGON, 4326)
);

-- Properties table
CREATE TABLE properties (
    property_id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    price NUMERIC(12, 2) NOT NULL,
    bedrooms SMALLINT,
    bathrooms NUMERIC(3, 1),
    square_feet INTEGER,
    lot_size NUMERIC(10, 2),
    year_built INTEGER,
    property_type_id INTEGER REFERENCES property_types(type_id),
    neighborhood_id INTEGER REFERENCES neighborhoods(neighborhood_id),
    street_address VARCHAR(255) NOT NULL,
    city VARCHAR(100) NOT NULL,
    state VARCHAR(50) NOT NULL,
    zip_code VARCHAR(20) NOT NULL,
    status VARCHAR(20) NOT NULL CHECK (status IN ('for_sale', 'pending', 'sold', 'for_rent', 'rented')),
    listing_date DATE NOT NULL,
    owner_id INTEGER REFERENCES users(user_id),
    agent_id INTEGER REFERENCES users(user_id),
    -- PostGIS point geometry for property location
    location GEOMETRY(POINT, 4326) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Property features lookup table
CREATE TABLE features (
    feature_id SERIAL PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL
);

-- Junction table for property features
CREATE TABLE property_features (
    property_id INTEGER REFERENCES properties(property_id),
    feature_id INTEGER REFERENCES features(feature_id),
    PRIMARY KEY (property_id, feature_id)
);

-- Property images table
CREATE TABLE property_images (
    image_id SERIAL PRIMARY KEY,
    property_id INTEGER REFERENCES properties(property_id),
    image_url VARCHAR(255) NOT NULL,
    caption VARCHAR(255),
    is_primary BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Saved searches/favorites
CREATE TABLE saved_properties (
    user_id INTEGER REFERENCES users(user_id),
    property_id INTEGER REFERENCES properties(property_id),
    saved_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, property_id)
);

-- Property views tracking (for analytics)
CREATE TABLE property_views (
    view_id SERIAL PRIMARY KEY,
    property_id INTEGER REFERENCES properties(property_id),
    user_id INTEGER REFERENCES users(user_id),
    viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ip_address VARCHAR(50)
);

-- Create spatial index on property locations
CREATE INDEX idx_properties_location ON properties USING GIST(location);

-- Create spatial index on neighborhood boundaries if you use them
CREATE INDEX idx_neighborhoods_boundary ON neighborhoods USING GIST(boundary);

-- Create indexes for foreign keys and common query patterns
CREATE INDEX idx_properties_status ON properties(status);
CREATE INDEX idx_properties_price ON properties(price);
CREATE INDEX idx_properties_bedrooms ON properties(bedrooms);
CREATE INDEX idx_properties_neighborhood ON properties(neighborhood_id);
CREATE INDEX idx_properties_property_type ON properties(property_type_id);

